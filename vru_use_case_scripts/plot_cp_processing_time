#!/usr/bin/env python3

from argparse import ArgumentParser
from collections import defaultdict
import csv
import json
from pathlib import Path
import sys

from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
from scipy.interpolate import splrep, BSpline


PEDESTRIAN_ID = 219

def parse_df(file_path: Path):
    df = pd.read_csv(file_path, header=0)

    return df

def filter_df_for_object_id(df: pd.DataFrame, id_: str):
    return df.loc[df["Object Id"] == id_].reset_index(drop=True)


def filter_df_for_timestamp(df: pd.DataFrame, timestamp: int):
    return df.loc[df["System Time (s)"] == timestamp]


def filter_df_for_timestamp(df: pd.DataFrame, timestamp: int):
    return df.loc[df["timestamp"] == timestamp]

def get_unique_object_ids(df: pd.DataFrame):
    return list(set(df["Object Id"]))

parser = ArgumentParser(
    prog="plot_cp_processing_time",
    description="Plot the error between detected object positions and their associated SDSM positions",
)

parser.add_argument(
    "--sdsm-csv",
    type=Path,
    help="CSV file containing SDSM message entries from rosbag file",
    required=True,
)

parser.add_argument(
    "--vehicle-detection-csv",
    type=Path,
    help="CSV file containing object detection entries from a rosbag file",
    required=True,
)

cli_args = parser.parse_args()

detections_df = parse_df(cli_args.vehicle_detection_csv)
sdsm_df = parse_df(cli_args.sdsm_csv)


#base off of pedestrian
pedestrian_df_from_cp = filter_df_for_object_id(detections_df, PEDESTRIAN_ID)

pedestrian_df_from_cp = pedestrian_df_from_cp.drop_duplicates(
  subset = ["Received Simulation Time (ms)", "Object Id"],
  keep = 'last').reset_index(drop = True)

pedestrian_df_from_sdsm = filter_df_for_object_id(sdsm_df, PEDESTRIAN_ID)

pedestrian_df_from_sdsm = pedestrian_df_from_sdsm.drop_duplicates(
  subset = ["Received Simulation Time (ms)", "Object Id"],
  keep = 'last').reset_index(drop = True)

print(pedestrian_df_from_cp)
print(pedestrian_df_from_sdsm)

result = (pedestrian_df_from_cp["Received Simulation Time (ms)"] - pedestrian_df_from_sdsm["Received Simulation Time (ms)"]).fillna(0)

print(result)
result.to_csv('/home/carma/Desktop/difference.csv', index=False)
pedestrian_df_from_cp.to_csv('/home/carma/Desktop/ped_cp.csv', index=False)
pedestrian_df_from_sdsm.to_csv('/home/carma/Desktop/ped_sdsm.csv', index=False)


# Plotting
result.plot()
plt.title('Data Column Plot')
plt.xlabel('Index')
plt.ylabel('Values')
plt.show()