#!/usr/bin/env python3

from argparse import ArgumentParser
from pathlib import Path
import pandas as pd

def parse_df(file_path: Path):
    df = pd.read_csv(file_path, header=0)

    return df

def filter_df_for_object_type(df: pd.DataFrame, object_type: str):
    return df.loc[df["Object Type"] == object_type].reset_index(drop=True)

parser = ArgumentParser(
    prog="plot_cp_processing_time",
    description="Plot the error between detected object positions and their associated SDSM positions",
)

parser.add_argument(
    "--sdsm-csv",
    type=Path,
    help="CSV file containing SDSM message entries from rosbag file",
    required=True,
)

parser.add_argument(
    "--vehicle-detection-csv",
    type=Path,
    help="CSV file containing object detection entries from a rosbag file",
    required=True,
)

cli_args = parser.parse_args()

detections_df = parse_df(cli_args.vehicle_detection_csv)
sdsm_df = parse_df(cli_args.sdsm_csv)

# Measuring processing time from ros bag is only possible for the pedestrian data in this use case
# This is because pedestrian is occluded form the vehicle, its data only comes from sdsm
# Therefore, from the first time pedestrian was detected in the sdsm and until it became available
# on fused object topic is the processing time
pedestrian_df_from_cp = filter_df_for_object_type(detections_df, "PEDESTRIAN")

pedestrian_df_from_cp = pedestrian_df_from_cp.drop_duplicates(
  subset = ["Received Simulation Time (ms)", "Object Type"],
  keep = 'last').reset_index(drop = True)

pedestrian_df_from_sdsm = filter_df_for_object_type(sdsm_df, "PEDESTRIAN")

pedestrian_df_from_sdsm = pedestrian_df_from_sdsm.drop_duplicates(
  subset = ["Received Simulation Time (ms)", "Object Type"],
  keep = 'last').reset_index(drop = True)

result = (pedestrian_df_from_cp["Received Simulation Time (ms)"] - pedestrian_df_from_sdsm["Received Simulation Time (ms)"]).fillna(0)

# Only first value is relevant because it shows the time
# passed between first received pedestrian data from SDSM
# and first reported pedestrian data in the cp objects
processing_time = result.iloc[0]

print(f"Simulation Time (ms) processing for Cooperative Perception Stack (Input from SDSM to output on local perception): {processing_time}")

