#!/usr/bin/env python3

from argparse import ArgumentParser
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt

COOPERATIVE_PERCEPTION_STACK_FREQUENCY_IN_HZ = 10.0


def parse_df(file_path: Path):
    df = pd.read_csv(file_path, header=0)

    return df

def filter_df_for_object_type(df: pd.DataFrame, object_type: str):
    return df.loc[df["Object Type"] == object_type].reset_index(drop=True)

def get_unique_object_ids(df: pd.DataFrame):
    return list(set(df["Object ID"]))

parser = ArgumentParser(
    prog="extract_cp_stack_processing_time",
    description="Extract the cdasim time (ms) it takes for CP stack to process an object",
)

parser.add_argument(
    "--sdsm-csv",
    type=Path,
    help="CSV file containing SDSM message entries with 'Received CDASim Time (ms)' and 'Object Type' from rosbag file",
    required=T, # TODO
)

parser.add_argument(
    "--vehicle-detection-csv",
    type=Path,
    help="CSV file containing object detection entries with 'Received CDASim Time (ms)' and 'Object Type' from a rosbag file",
    required=True,
)

parser.add_argument(
    "--plots-dir",
    type=Path,
    default=Path("plots"),
    help="Directory to store the generated plots",
)

# NEW

def plot_duration(df: pd.DataFrame, plots_dir):

    # Plot duration over Message Time for each Object ID
    fig, ax = plt.subplots()
    ax.stem(
        df["System Time (s)"],
        df["Duration Between Msgs (s)"],
        basefmt=" ",
        markerfmt=" ",
        use_line_collection=True,
    )
    ax.set_xlim(left=0)  # Set x-axis to start at zero
    ax.set_ylim(bottom=0, top=1.0)  # Set y-axis to start at zero
    plt.axhline(y=0.2, color="r", linestyle="--", label="Operation Cutoff")
    plt.axhline(
        y= 1.0 / COOPERATIVE_PERCEPTION_STACK_FREQUENCY_IN_HZ,
        color="b",
        linestyle="--",
        label="CP stack operation period",
    )
    plt.xlabel("System Time (s) of the Object that is Missing")
    plt.ylabel("Duration (s) in CDASim Time")
    plt.title(f"Processing duration for CP")
    plt.legend()
    print(plots_dir)
    #plt.show()
    plt.savefig(plots_dir)

def get_processing_time(df: pd.DataFrame):
    df = df[["System Time (s)"]].drop_duplicates()

    df.sort_values(by=["System Time (s)"], inplace=True)

    print(df)
    # Shift by -1 meaning move up so that each row
    # indicates what timestamp the data started missing
    # and how long did it last
    df["Duration Between Msgs (s)"] = (
        df["System Time (s)"].diff().shift(-1)
    )
    print(df)
    # Reset the index of the DataFrame
    df.reset_index(drop=True, inplace=True)

    return df


cli_args = parser.parse_args()

detections_df = parse_df(cli_args.vehicle_detection_csv)
if (cli_args.sdsm_csv):
    sdsm_df = parse_df(cli_args.sdsm_csv)
cli_args.plots_dir.mkdir(exist_ok=True, parents=True)


durations_df = get_processing_time(detections_df)
plot_duration (durations_df, cli_args.plots_dir)

# OLD
"""
# Measuring processing time from ros bag is only possible for the pedestrian data in this use case
# This is because pedestrian is occluded form the vehicle, its data only comes from sdsm
# Therefore, from the first time pedestrian was detected in the sdsm and until it became available
# on fused object topic is the processing time
pedestrian_df_from_cp = filter_df_for_object_type(detections_df, "PEDESTRIAN")

pedestrian_df_from_cp = pedestrian_df_from_cp.drop_duplicates(
  subset = ["Received CDASim Time (ms)", "Object Type"],
  keep = 'last').reset_index(drop = True)

pedestrian_df_from_sdsm = filter_df_for_object_type(sdsm_df, "PEDESTRIAN")

pedestrian_df_from_sdsm = pedestrian_df_from_sdsm.drop_duplicates(
  subset = ["Received CDASim Time (ms)", "Object Type"],
  keep = 'last').reset_index(drop = True)

result = (pedestrian_df_from_cp["Received CDASim Time (ms)"] - pedestrian_df_from_sdsm["Received CDASim Time (ms)"]).fillna(0)

# Only first value is relevant because it shows the time
# passed between first received pedestrian data from SDSM
# and first reported pedestrian data in the cp objects
processing_time = result.iloc[0]

print(f"CDASim Time (ms) processing for Cooperative Perception Stack (Input from SDSM to output on local perception): {processing_time}")

"""