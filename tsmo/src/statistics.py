#This script uses all previously generated analysis csv files and plots several metrics of interest for each test case.
import sys
from csv import writer
from csv import reader
import os
import constants
import pandas as pd
import sys
import shutil
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import math
from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                               AutoMinorLocator)

def metrics():
    input_directory_path = f'{constants.DATA_DIR}/{constants.PARSED_OUTPUT_DIR}'
    output_directory_path = f'{constants.DATA_DIR}/{constants.METRIC_DIR}'

    all_in_filenames = os.listdir(input_directory_path)
    for file in all_in_filenames:
        filename = file.split(".")[0]
        #read the parsed spat data file generated by the modified_spat_parser script
        if "scheduling_service_processing" in file: 
            ss = pd.read_csv(f'{input_directory_path}/{file}')
            
            with open(f'{output_directory_path}/{filename}_Metrics.csv', 'w', newline='') as write_obj:
                csv_writer = writer(write_obj)

                csv_writer.writerow(["SS_Mean(ms)", "SS_Min(ms)", "SS_Max(ms)", "SS_Std_Dev(ms)", "SS_25th_Percentile", "SS_75th_Percentile"])

                csv_writer.writerow([ss['Processing_Time(ms)'].mean(), ss['Processing_Time(ms)'].std(), ss['Processing_Time(ms)'].min(),
                ss['Processing_Time(ms)'].quantile(0.25), ss['Processing_Time(ms)'].quantile(0.50), ss['Processing_Time(ms)'].quantile(0.75),
                ss['Processing_Time(ms)'].max()])

if __name__ == '__main__':
    if len(sys.argv) < 1:
        print('Run with: "python3 statistics.py"')
    else:          
        metrics()    
