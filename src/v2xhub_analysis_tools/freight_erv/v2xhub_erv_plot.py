import sys
import pandas as pd
import argparse
import matplotlib.pyplot as plt
import matplotlib as mpl
import xml.etree.ElementTree as ET
import matplotlib.dates as mdates
import numpy as np

'''
Get file names and sheet names
'''
def get_filename():
    inputfile = ''
    parser = argparse.ArgumentParser(prog="V2xhub Analysis for ERV BSM")
    parser.add_argument('--input', type=str, required=True)
    parser.add_argument('--sheet_names', type=str, required=True,
                        help='FER-13-1-1,FER-14,FER-15,FER-TBD-1')
    args = parser.parse_args()
    print(f'Received excel file: {args.input}')
    inputfile = args.input
    sheet_names = args.sheet_names
    return inputfile, sheet_names

'''Create  bar plot based on x,y values and labels'''
def create_bar_plot(xlabel, ylabel, title, figure_name, dict_to_plot):
    fig, ax = plt.subplots(figsize=(10, 5))
    bar = ax.bar(list(dict_to_plot.keys()),
                    list(dict_to_plot.values()))
    plt.tight_layout()
    ax.set_ylabel(ylabel)
    ax.set_xlabel(xlabel)
    ax.set_title(title)
    ax.bar_label(bar)
    plt.savefig(figure_name,bbox_inches='tight')

'''
Comparing the content between two dataframe to find matching value, calculating the delay based on the logged timestamp of the matching values
'''
def get_delay_by_comparing_two_frame(df_frame_source,  source_time_lbl, source_value_lbl, df_frame_target, target_time_lbl, target_value_lbl, return_dict_time_label, return_dict_value_label):
    num_of_unique_match = 0
    return_dict = {}
    return_dict[return_dict_time_label] = []
    return_dict[return_dict_value_label] = []
    total_target_num = len(df_frame_target.index)
    for index, target_row in df_frame_target.iterrows():
        target_time_str = target_row[target_time_lbl]
        target = target_row[target_value_lbl]
        is_match_found = False
        for source_index, source_row in df_frame_source.iterrows():
            source = source_row[source_value_lbl]
            if target == source:
                target_time = pd.to_datetime(target_time_str)
                source_time = pd.to_datetime(source_row[source_time_lbl])
                target_milli_of_day = target_time.hour * 3600* 1000 + target_time.minute * 60* 1000 + target_time.second* 1000 + target_time.microsecond/1000
                source_milli_of_day = source_time.hour * 3600* 1000 + source_time.minute * 60 * 1000+ source_time.second * 1000 + source_time.microsecond/1000
                delay_milli = target_milli_of_day - source_milli_of_day
                if delay_milli >= 0:                                                                
                    num_of_unique_match += 1  
                    is_match_found = True              
                    return_dict[return_dict_time_label].append(target_time_str)
                    return_dict[return_dict_value_label].append(delay_milli)
                    df_frame_source = df_frame_source.drop(source_index)   
                    # print(f'Compared and matched count {num_of_unique_match}. {total_target_num-num_of_unique_match} to go.')
                    break
        if not is_match_found:
            print(f'No match found for {target_value_lbl}: {target_time_str} : {target}')
        
    if num_of_unique_match != total_target_num:
        print(f'WARNING: BSM to compare num  { total_target_num } != BSM matched record {num_of_unique_match}.')  
    else:
        print(f'Delay calculation done!')
    return return_dict
'''
Main entrypoint to read the excel file and generate plots for metrics: FER-13, FER-14, adn FER-15.
This plot data is generated by scripts: v2xhub_log_analysis_erv.py
'''
def main():
    inputfile, sheet_names_input_str = get_filename()
    sheet_names_input = sheet_names_input_str.split(',')
    FER_4_field_dicts = {}
    FER_5_field_dicts = {}
    FER_8_field_dicts = {}
    FER_9_field_dicts = {}
    FER_10_field_dicts = {}
    FER_11_1_Supportive_field_dictse = {}
    FER_11_2_Supportive_field_dicts = {}
    df_sheet_bsm_not_from_erv = {}
    df_sheet_bsm_forwarding_to_cloud = {}
    total_num_bsm_forwarding = 0
    df_sheet_receive_bsm = {}
    FIVE_SEC_WINDOW = 5
    ONE_SEC_WINDOW = 1
    # Read excel file and see all sheet names
    try:
        xl = pd.ExcelFile(inputfile)
        all_sheet_names = xl.sheet_names
        if bool(set(all_sheet_names).isdisjoint(sheet_names_input)):
            print(
                f'ERROR: Sheet names {sheet_names_input_str} not found! Provide correct sheet names with comma sperated.')
            exit()
    
        ''' ***Reading sheets and process metrics*** '''
        print(f'Reading sheet {sheet_names_input}. \nGenerating plots...')
        for sheet_name in sheet_names_input:
            sheet_name = sheet_name.strip()
            if sheet_name not in all_sheet_names:
                print(f'Sheet {sheet_name} does not exist. SKIP!')
                continue
            try:
                if sheet_name == 'FER-4-5-8-9':
                    '''
                    Metric FER-4, FER-5, FER-8, and FER-9: Reading sheet FER-4-5. 
                    FER-4: Generate field dictionaries for V2xHub receives the ERV's BSM without Part II information before the ERV activates its lights and siren.
                    FER-5: Generate field dictionaries for any 5-second window, V2xHub receives the ERV's BSM without Part II information before the ERV activates its lights and siren at a rate of 8-12 messages/sec..
                    FER-8: V2xHub receives the ERV's BSM with Part II information once the ERV falls within the RSU's communication range after it activates its lights and siren.
                    FER-9: Once the ERV activates its lights and siren and falls within the communication range of the RSU, V2xHub will begin to receive the ERVs BSM at a rate of 8-12 messages/sec.
                    '''                
                    df_sheet_receive_bsm = pd.read_excel(
                        inputfile, sheet_name=sheet_name)
                    total_num_bsm = len(df_sheet_receive_bsm.index)
                    print(
                        f'Num of BSM received by v2xhub: {total_num_bsm}')
                    bsm_no_partII_num = 0
                    bsm_with_partII_num = 0
                    bsm_siren_light_in_use = 0
                    bsm_siren_in_use = 0
                    bsm_light_in_use = 0
                    bsm_light_siren_not_in_use = 0
                    bsm_emergency_exist = 0
                    bsm_emergency_exist_light_siren_in_use = 0
                    for item in df_sheet_receive_bsm['Receive BSM']:
                        xml = ET.fromstring(item)
                        if '<partII>' not in item:
                            bsm_no_partII_num += 1
                        if '<partII>' in item:
                            bsm_with_partII_num += 1
                        sirenUse_inUse = xml.find('./partII/BSMpartIIExtension/partII-Value/SpecialVehicleExtensions/vehicleAlerts/sirenUse/inUse')
                        lightsUse_inUse = xml.find('./partII/BSMpartIIExtension/partII-Value/SpecialVehicleExtensions/vehicleAlerts/lightsUse/inUse')
                        response_emergency = xml.find('./partII/BSMpartIIExtension/partII-Value/SpecialVehicleExtensions/vehicleAlerts/responseType/emergency')
                        if sirenUse_inUse != None and lightsUse_inUse != None:
                            bsm_siren_light_in_use += 1
                        if sirenUse_inUse != None:
                            bsm_siren_in_use += 1
                        if lightsUse_inUse != None:
                            bsm_light_in_use += 1
                        if sirenUse_inUse == None and lightsUse_inUse == None:
                            bsm_light_siren_not_in_use += 1                    
                        if response_emergency != None:
                            bsm_emergency_exist += 1                                      
                        if response_emergency != None and sirenUse_inUse != None and lightsUse_inUse != None:
                            bsm_emergency_exist_light_siren_in_use += 1
                    FER_4_field_dicts['Without partII'] = bsm_no_partII_num
                    FER_4_field_dicts['No Siren Nor Light In Use'] = bsm_light_siren_not_in_use
                    FER_8_field_dicts['With partII'] = bsm_with_partII_num
                    FER_8_field_dicts['Siren&Light in Use'] = bsm_siren_light_in_use
                    FER_8_field_dicts['Siren in Use'] = bsm_siren_in_use
                    FER_8_field_dicts['Light in Use'] = bsm_light_in_use
                    FER_10_field_dicts['Emergency Exist'] = bsm_emergency_exist
                    FER_5_field_dicts ['Time (UTC)'] = []
                    FER_5_field_dicts ['Average num of BSM per second without partII (HZ)'] = []
                    five_second_window_bsm_count = 0     
                    select_start_time = 0
                    last_record_time_no_partII = 0
                    for index, receive_bsm_row in df_sheet_receive_bsm.iterrows():
                        bsm_str = receive_bsm_row['Receive BSM']
                        record_time_str = receive_bsm_row['Time (UTC)']
                        if '<partII>' not in bsm_str:
                            if select_start_time == 0:
                                select_start_time  =  pd.to_datetime(record_time_str)    
                            if select_start_time != 0:                                         
                                record_time = pd.to_datetime(record_time_str)
                                last_record_time_no_partII = record_time
                                record_time_total_seconds_of_day = record_time.hour * 3600 + record_time.minute * 60 + record_time.second
                                select_time_total_seconds_of_day = select_start_time.hour * 3600 + select_start_time.minute * 60 + select_start_time.second
                                # print(f'\nRecord time: {record_time}. selected time: {select_start_time}. \n\tRecord ts: {record_time_total_seconds_of_day} >> selected ts: {select_time_total_seconds_of_day}')
                                if record_time_total_seconds_of_day >= select_time_total_seconds_of_day and  (record_time_total_seconds_of_day < select_time_total_seconds_of_day + FIVE_SEC_WINDOW ):
                                    five_second_window_bsm_count += 1
                                else:
                                    FER_5_field_dicts ['Time (UTC)'].append(select_start_time)
                                    FER_5_field_dicts ['Average num of BSM per second without partII (HZ)'].append(five_second_window_bsm_count / FIVE_SEC_WINDOW)
                                    select_start_time = pd.to_datetime(record_time_str)
                                    five_second_window_bsm_count = 1  
                                
                    # In case, the last few record does not reach 5 second
                    if select_start_time != 0:
                        select_time_total_seconds_of_day = select_start_time.hour * 3600 + select_start_time.minute * 60 + select_start_time.second  
                        last_record_time_total_seconds_of_day = last_record_time_no_partII.hour * 3600 + last_record_time_no_partII.minute * 60 + last_record_time_no_partII.second                      
                        if five_second_window_bsm_count > 1 and  (select_time_total_seconds_of_day + FIVE_SEC_WINDOW > last_record_time_total_seconds_of_day):
                                FER_5_field_dicts ['Time (UTC)'].append(select_start_time)
                                FER_5_field_dicts ['Average num of BSM per second without partII (HZ)'].append(five_second_window_bsm_count / FIVE_SEC_WINDOW)

                    FER_9_field_dicts ['Time (UTC)'] = []
                    FER_9_field_dicts ['Average num of BSM per second with siren and light on (HZ)'] = []
                    select_start_time = 0
                    per_second_window_bsm_count = 0
                    for index, receive_bsm_row in df_sheet_receive_bsm.iterrows():
                        bsm_str = receive_bsm_row['Receive BSM']
                        record_time_str = receive_bsm_row['Time (UTC)']
                        bsm_xml = ET.fromstring(bsm_str)
                        sirenUse_inUse = bsm_xml.find('./partII/BSMpartIIExtension/partII-Value/SpecialVehicleExtensions/vehicleAlerts/sirenUse/inUse')
                        lightsUse_inUse = bsm_xml.find('./partII/BSMpartIIExtension/partII-Value/SpecialVehicleExtensions/vehicleAlerts/lightsUse/inUse')
                        response_emergency = bsm_xml.find('./partII/BSMpartIIExtension/partII-Value/SpecialVehicleExtensions/vehicleAlerts/responseType/emergency')
                    
                        if sirenUse_inUse != None and lightsUse_inUse != None:                    
                            if select_start_time == 0:
                                select_start_time  =  pd.to_datetime(record_time_str)    
                            if select_start_time != 0:                                         
                                record_time = pd.to_datetime(record_time_str)
                                record_time_total_seconds_of_day = record_time.hour * 3600 + record_time.minute * 60 + record_time.second
                                select_time_total_seconds_of_day = select_start_time.hour * 3600 + select_start_time.minute * 60 + select_start_time.second
                                # print(f'\nRecord time: {record_time}. selected time: {select_start_time}. \n\tRecord ts: {record_time_total_seconds_of_day} >> selected ts: {select_time_total_seconds_of_day}')
                                if record_time_total_seconds_of_day >= select_time_total_seconds_of_day and  (record_time_total_seconds_of_day < select_time_total_seconds_of_day + ONE_SEC_WINDOW ):
                                    per_second_window_bsm_count += 1
                                else:
                                    FER_9_field_dicts ['Time (UTC)'].append( select_start_time)
                                    FER_9_field_dicts ['Average num of BSM per second with siren and light on (HZ)'].append(per_second_window_bsm_count)
                                    select_start_time = pd.to_datetime(record_time_str)   
                                    per_second_window_bsm_count = 1 

                elif sheet_name == 'FER-10-11-1':
                    '''
                    Metrics FER-10: Once V2xHub receives the ERV's BSM, it will identify whether emergency exists and forward the ERV's BSM over to CARMA Cloud.
                    Metrics FER-11: Reading sheet FER-10-11. Generate dictionary for once V2xHub receives the ERV's BSM, it will identify whether emergency exists and forward the ERV's BSM over to CARMA Cloud within 0.1 second.
                    '''                   
                    df_sheet_forwarding_msg_via_curl = pd.read_excel(
                        inputfile, sheet_name=sheet_name)
                    total_num_forwarding_bsm_via_curl = len(df_sheet_forwarding_msg_via_curl.index)
                    
                    df_sheet_bsm_forwarding_to_cloud = pd.read_excel(inputfile, sheet_name='FER-TBD-4')
                    total_num_bsm_forwarding = len(df_sheet_bsm_forwarding_to_cloud.index)

                    if total_num_forwarding_bsm_via_curl > 0 and total_num_bsm_forwarding > 0:
                        print(f'Calculating delay...')
                        FER_11_1_Supportive_field_dictse = get_delay_by_comparing_two_frame(df_sheet_bsm_forwarding_to_cloud, 'Time (UTC)', 'Forward ERV BSM to cloud', df_sheet_forwarding_msg_via_curl, 'Time (UTC)','Forwarding message to cloud via curl', 'Time (UTC)','BSM cloud forwarding via curl delay (ms)')                     

                elif sheet_name == 'FER-10-11-2':
                        '''
                        Supportive metrics FER-10-11-2: Successfully forward BSM to the cloud and cloud response returns.                
                        '''                        
                        df_sheet_forward_bsm_success_via_curl = pd.read_excel(
                            inputfile, sheet_name=sheet_name)
                        total_num_forwarding_bsm_successfully_via_curl = len(df_sheet_forward_bsm_success_via_curl.index)
                        FER_10_field_dicts['Successfully forwarded message to cloud via curl'] = total_num_forwarding_bsm_successfully_via_curl

                        df_sheet_bsm_forwarding_to_cloud = pd.read_excel(inputfile, sheet_name='FER-TBD-4')
                        total_num_bsm_forwarding = len(df_sheet_bsm_forwarding_to_cloud.index)

                        if total_num_forwarding_bsm_via_curl > 0 and total_num_bsm_forwarding > 0:
                            print(f'Calculating delay...')
                            FER_11_2_Supportive_field_dicts = get_delay_by_comparing_two_frame(df_sheet_bsm_forwarding_to_cloud, 'Time (UTC)', 'Forward ERV BSM to cloud', df_sheet_forward_bsm_success_via_curl, 'Time (UTC)','Successfully forwarded message to cloud via curl', 'Time (UTC)','BSM cloud forwarding and response delay (ms)')   

                elif sheet_name == 'FER-TBD-1':
                    '''
                    Supportive metrics FER-TBD-1: Received ERV BSM from cloud.                
                    '''
                    df_sheet_bsm_from_cloud = pd.read_excel(inputfile, sheet_name=sheet_name)
                    print(f'Total number of BSM received from cloud: {len(df_sheet_bsm_from_cloud.index)}')
                elif sheet_name == 'FER-TBD-2':
                    '''
                    Supportive metrics FER-TBD-2: Received ERV BSM from cloud and broadcast ERV BSM delay(ms).                
                    '''
                    df_sheet_bsm_from_cloud_broadcast_delay = pd.read_excel(inputfile, sheet_name=sheet_name)
                elif sheet_name == 'FER-TBD-3':
                    '''
                    Supportive metrics FER-TBD-2: Received BSMs that do not have emergency exist.                
                    '''
                    df_sheet_bsm_not_from_erv = pd.read_excel(inputfile, sheet_name=sheet_name)
                    print(f'Num of BSM V2xHub None-ERV BSM: {len(df_sheet_bsm_not_from_erv.index)}')

                elif sheet_name == 'FER-TBD-5':
                    '''
                    Supportive metrics FER-TBD-5: Delay calculation result between receiving BSM and forward it to carma-cloud.                
                    '''
                    df_sheet_forwarding_bsm_delay = pd.read_excel(inputfile, sheet_name=sheet_name)
            except ValueError as a:
                print(f'{a}')
    except FileNotFoundError:
        print(f'File {inputfile} not found!')

    ''' ***START Plotting*** '''
    '''V2xHub receives the ERV's BSM without Part II information before the ERV activates its lights and siren.'''
    if len(FER_4_field_dicts.keys()) == 2:
        fig, ax = plt.subplots(figsize=(15, 10))
        bar = ax.bar(list(FER_4_field_dicts.keys()),
                     list(FER_4_field_dicts.values()))
        plt.tight_layout()
        ax.set_ylabel('Numbers of BSM')
        ax.set_xlabel('BSM Status')
        plt.xticks(rotation=10)
        ax.set_title(
            'FER-4: V2xHub receives the ERV\'s BSM without Part II information before the ERV activates its lights and siren.')
        ax.bar_label(bar)
        plt.savefig("FER-4.png",bbox_inches='tight')

    '''Metric FER-5: For any 5-second window, V2xHub receives the ERV's BSM without Part II information before the ERV activates its lights and siren at a rate of 8-12 messages/sec..'''
    if len(FER_5_field_dicts.keys()) == 2:
        fig, ax = plt.subplots(figsize=(15, 10))
        fig.autofmt_xdate()
        x_index = 'Time (UTC)'
        y_index = 'Average num of BSM per second without partII (HZ)'
        df = pd.DataFrame(FER_5_field_dicts)
        ax.plot(df[x_index], df[y_index])
        plt.xlabel(x_index)
        plt.ylabel(y_index)
        ax.axhline(y=8, color='r', linestyle='-', label='8')
        xfmt = mdates.DateFormatter('%H:%M:%S')
        ax.xaxis.set_major_formatter(xfmt)
        plt.legend(bbox_to_anchor = (1.0, 1), loc = 'upper right')
        plt.setp(plt.gca().xaxis.get_majorticklabels(),'rotation', 30)
        plt.title('FER-5: For any 5-second window, V2xHub receives the ERV\'s BSM without Part II information before the ERV activates its lights and siren at a rate of 8-12 messages/sec.')
        plt.savefig("FER-5.png",bbox_inches='tight')
        with pd.ExcelWriter("FER-5.xlsx") as writer:
            df.to_excel(writer, sheet_name='FER-5', index=False)
            print(f'Generated sheet for metric: FER-5' )
    
    '''Metric FER-8: V2xHub receives the ERV's BSM with Part II information once the ERV falls within the RSU's communication range after it activates its lights and siren.'''
    if len(FER_8_field_dicts.keys()) == 4:
        create_bar_plot('BSM Status','Number of BSMs','FER-8:V2xHub receives the ERV\'s BSM with Part II information once the ERV falls within the RSU\'s communication range after it activates its lights and siren.','FER-8.png',FER_8_field_dicts )       

    '''Metric FER-9: Once the ERV activates its lights and siren and falls within the communication range of the RSU, V2xHub will begin to receive the ERVs BSM at a rate of 8-12 messages/sec.'''
    if len(FER_9_field_dicts.keys()) == 2:
        x_index = 'Time (UTC)'
        y_index = 'Average num of BSM per second with siren and light on (HZ)'
        df = pd.DataFrame(FER_9_field_dicts)
        if len(df.index) > 0:
            fig, ax = plt.subplots(figsize=(15, 10))
            fig.autofmt_xdate()
            ax.plot(df[x_index], df[y_index])
            plt.xlabel(x_index)
            plt.ylabel(y_index)
            xfmt = mdates.DateFormatter('%H:%M:%S')
            ax.xaxis.set_major_formatter(xfmt)
            ax.axhline(y=8, color='r', linestyle='-', label='8')
            plt.legend(bbox_to_anchor = (1.0, 1), loc = 'upper right')
            plt.setp(plt.gca().xaxis.get_majorticklabels(),'rotation', 10)
            plt.title('FER-9: Once the ERV activates its lights and siren and falls within the communication range of the RSU, V2xHub will begin to receive the ERVs BSM at a rate of 8-12 messages/sec.')
            plt.savefig("FER-9.png",bbox_inches='tight')
            with pd.ExcelWriter("FER-9.xlsx") as writer:
                df.to_excel(writer, sheet_name='FER-9', index=False)
                print(f'Generated sheet for metric: FER-9' )
    

    '''Metric FER-10: Once V2xHub receives the ERV's BSM, it will identify whether emergency exists and forward the ERV's BSM over to CARMA Cloud.'''
    if len(FER_10_field_dicts.keys()) == 2:
        create_bar_plot('BSM Status','Number of BSMs','FER-10: Once V2xHub receives the ERV\'s BSM, it will identify whether emergency exists and forward the ERV\'s BSM over to CARMA Cloud','FER-10.png',FER_10_field_dicts )

    '''Metric FER-11: Read sheet: FER-TBD-5. Once V2xHub receives the ERV's BSM, it will identify whether emergency exists and forward the ERV's BSM over to CARMA Cloud within 0.1 second.'''
    if ('df_sheet_forwarding_bsm_delay' in locals() or 'df_sheet_forwarding_bsm_delay' in globals()) and len(df_sheet_forwarding_bsm_delay) > 0:
        x_index = 'Time (UTC)'
        y_index = 'Received ERV BSM and forward ERV BSM to cloud delay (ms)'
        fig, ax = plt.subplots(figsize=(15, 10))
        plt.xlabel(x_index)
        plt.ylabel(y_index)
        plt.locator_params(axis='x', nbins=3)
        ax.plot(df_sheet_forwarding_bsm_delay[x_index], df_sheet_forwarding_bsm_delay[y_index])
        ax.xaxis.set_major_locator(plt.MaxNLocator(3))
        plt.title('FER-11: Once V2xHub receives the ERV\'s BSM, it will identify whether emergency exists and forward the ERV\'s BSM over to CARMA Cloud within 0.1 second.')
        plt.savefig("FER-11.png",bbox_inches='tight')
        with pd.ExcelWriter("FER-11.xlsx") as writer:
            df_sheet_forwarding_bsm_delay.to_excel(writer, sheet_name='FER-11', index=False)
            print(f'Generated sheet for metric: FER-11' )

    '''Suppotive metric FER-11 : BSM cloud forwarding and request sent via curl delay.'''
    if len(FER_11_1_Supportive_field_dictse.keys()) == 2:
        x_index = 'Time (UTC)'
        y_index = 'BSM cloud forwarding via curl delay (ms)'
        df = pd.DataFrame(FER_11_1_Supportive_field_dictse)
        if len(df.index) > 0:     
            fig, ax1 = plt.subplots(figsize=(15, 10))              
            plt.xlabel(x_index)
            plt.locator_params(axis='x', nbins=3)
            plt.ylabel(y_index)
            plt.plot(df[x_index], df[y_index])
            ax1.xaxis.set_major_locator(plt.MaxNLocator(3))
            plt.title('FER-11-1-Supportive: V2xHub forward BSM request to cloud and request sent via curl.')
            plt.savefig("FER-11-1-Supportive.png",bbox_inches='tight')
            with pd.ExcelWriter("FER-11-1-Supportive.xlsx") as writer:
                df.to_excel(writer, sheet_name='FER-11-1-Supportive', index=False)
                print(f'Generated sheet for metric: FER-11-1-Supportive' )
    '''
    Suppotive metric FER-11 : BSM cloud forwarding and cloud response success delay.
    '''
    if len(FER_11_2_Supportive_field_dicts.keys()) == 2:
        x_index = 'Time (UTC)'
        y_index = 'BSM cloud forwarding and response delay (ms)'
        df = pd.DataFrame(FER_11_2_Supportive_field_dicts)
        if len(df.index) > 0:     
            fig, ax1 = plt.subplots(figsize=(15, 10))              
            plt.xlabel(x_index)
            plt.locator_params(axis='x', nbins=3)
            plt.ylabel(y_index)
            ax1.axhline(y=300, color='r', linestyle='-', label='300')
            ax1.axhline(y=200, color='y', linestyle='-', label='200')
            plt.legend(bbox_to_anchor = (1.0, 1), loc = 'upper right')
            plt.plot(df[x_index], df[y_index])
            ax1.xaxis.set_major_locator(plt.MaxNLocator(3))
            plt.title('FER-11-2-Supportive: Once V2xHub forward BSMrequest to cloud, cloud response delay.')
            plt.savefig("FER-11-2-Supportive.png",bbox_inches='tight')
            with pd.ExcelWriter("FER-11-2-Supportive.xlsx") as writer:
                df.to_excel(writer, sheet_name='FER-11-2-Supportive', index=False)
                print(f'Generated sheet for metric: FER-11-2-Supportive' )
    

    '''Read sheet: FER-TBD-2. Receive from CARMA Cloud and broadcast BSM delay'''
    if ('df_sheet_bsm_from_cloud_broadcast_delay' in locals() or 'df_sheet_bsm_from_cloud_broadcast_delay' in globals()) and len(df_sheet_bsm_from_cloud_broadcast_delay) > 0:
        x_index = 'Time (UTC)'
        y_index = 'Received ERV BSM from cloud and broadcast ERV BSM delay(ms)'
        fig, ax = plt.subplots(figsize=(15, 10))
        plt.xlabel(x_index)
        plt.ylabel(y_index)
        ax.plot(df_sheet_bsm_from_cloud_broadcast_delay[x_index], df_sheet_bsm_from_cloud_broadcast_delay[y_index])
        ax.xaxis.set_major_locator(plt.MaxNLocator(3))
        plt.title('FER-TBD-2: Received ERV BSM from cloud and broadcast ERV BSM delay(ms)')
        plt.savefig("FER-TBD-2.png",bbox_inches='tight')
    print(f'Done!')

if __name__ == '__main__':
    main()
